<h1 class="text-center mt-5">Productos</h1>

<div id="productContainer" class="">

  {{!-- limit --}}
  <div class="d-flex flex-column gap-2 justify-content-center my-3">
    <div class="input-group container text-center justify-content-center">
      <span for="limitSelect" class="input-group-text">Limitar a:</span>
      <select id="limitSelect" class="form-select" style="max-width: fit-content;" onchange="loadProducts(1, this.value)">
        <option value="5">5</option>
        <option value="10" selected>10</option>
        <option value="20">20</option>
        <option value="30">30</option>
      </select>
    </div>

    {{!-- search --}}
    <div class="container" style="max-width: 800px; margin: 0 auto;">
      <div class="input-group mb-2" >
        <span class="input-group-text">Titulo</span>
        <input id="titleSearch" type="text" class="form-control" placeholder="Puma" aria-label="Title">
        <span class="input-group-text">Descripción</span>
        <input id="descriptionSearch" type="text" class="form-control" placeholder="Rocket" aria-label="Description">
        <span class="input-group-text">Categoría</span>
        <input id="categorySearch" type="text" class="form-control" placeholder="Calzado" aria-label="Category">
      </div>
      <div class="input-group mb-2">
        <span class="input-group-text">Precio mínimo:</span>
        <input id="minPriceSearch" type="number" class="form-control" aria-label="Price" step="1000" min="0">
        <span class="input-group-text">Precio máximo:</span>
        <input id="maxPriceSearch" type="number" class="form-control" aria-label="Price" step="1000" min="1000">
        <span class="input-group-text">Orden:</span>
        <select id="sortSelect" class="form-select" style="max-width: fit-content;" onchange="loadProducts(1, this.value)">
          <option value="" selected>-</option>
          <option value="asc">Menor a mayor</option>
          <option value="desc">Mayor a menor</option>
        </select>
      </div>
      <button button class="btn btn-primary w-100" onclick="loadProducts()">Buscar</button>
    </div>
  </div>

  {{!-- paginate --}}
  <nav id="paginationNav" aria-label="Page navigation">
    
  </nav>

  {{!-- products --}}
  <div id="productList" class="d-flex flex-wrap justify-content-center gap-3 mt-4 mb-5 pb-5">

  </div>
</div>


<script>
  loadProducts();

  // Cargar y mostrar los productos al cargar la página
  async function loadProducts(page = 1, limit = 10) {
    limit = document.getElementById('limitSelect').value || limit;

    const title = document.getElementById('titleSearch').value;
    const description = document.getElementById('descriptionSearch').value;
    const category = document.getElementById('categorySearch').value;
    const minPrice = document.getElementById('minPriceSearch').value;
    const maxPrice = document.getElementById('maxPriceSearch').value;
    const sort = document.getElementById('sortSelect').value || '';

    // Construcción del filtro dinámico
    const filter = {};

    if (title) {
      filter.title = { $regex: title, $options: "i" };
    }

    if (description) {
      filter.description = { $regex: description, $options: "i" };
    }

    if (category) {
      filter.category = { $regex: category, $options: "i" };
    }

    if (minPrice || maxPrice) {
      filter.price = {};
      if (minPrice) filter.price.$gte = parseFloat(minPrice);
      if (maxPrice) filter.price.$lte = parseFloat(maxPrice);
    }

    // Query enviado para filtrar el backend
    const query = filter ? JSON.stringify(filter) : '{}';

    try {
      const response = await fetch(`/api/products?page=${page}&limit=${limit}&query=${query}&sort=${sort}`);
      if (!response.ok) {
        throw new Error('Error al obtener los productos');
      }
      const products = await response.json();
      renderProducts(products);
    } catch (error) {
      console.error('Error al cargar los productos:', error);
      const container = document.getElementById('productContainer');
      container.innerHTML = '<p class="fs-4 text-center">Error al cargar los productos.</p>';
    }
  }



  // Renderizar los productos en el contenedor
  function renderProducts(products) {
    /*
    {
      "status": "success",
      "payload": [
        {
          "_id": "64a7f0f4e1f1c8b1f4e5d6a1",
          "title": "Producto 1",
          "description": "Descripción del producto 1",
          "price": 100,
          "thumbnails": ["https://via.placeholder.com/150"],
          "code": "P001",
          "stock": 10,
          "category": "Categoría A",
          "status": true,
          "createdAt": "2023-07-03T12:00:00.000Z",
          "updatedAt": "2023-07-03T12:00:00.000Z",
          "__v": 0
        },
        // Más productos...
      ],
      "totalPages": 5,
      "prevPage": null,
      "nextPage": 2,
      "page": 1,
      "hasPrevPage": false,
      "hasNextPage": true,
      "prevLink": null,
      "nextLink": "/api/products?page=2&limit=10"
    }
    */

    if (!products || !products.payload) {
      const container = document.getElementById('productContainer');
      container.innerHTML = '<p class="fs-4 text-center">No hay productos disponibles.</p>';
      return;
    }

    const paginationNav = document.getElementById('paginationNav');
    paginationNav.innerHTML = '';
    paginationNav.innerHTML = `
    <ul class="pagination justify-content-center">
      <li class="page-item">
        <button class="page-link" aria-label="Previous" onclick="loadProducts(${products.prevPage})" ${products.hasPrevPage == true ? '' : 'disabled=true'}>
          <span aria-hidden="true">&laquo;</span>
        </button>
      </li>
      <li class="page-item">
        <span class="page-link">${products.page} / ${products.totalPages}</span>
      </li>
      <li class="page-item">
        <button class="page-link" aria-label="Next" onclick="loadProducts(${products.nextPage})" ${products.hasNextPage == true ? '' : 'disabled=true'}>
          <span aria-hidden="true">&raquo;</span>
        </button>
      </li>
    </ul>
    `


    const productsContainer = document.getElementById('productList');
    productsContainer.innerHTML = ''; // Limpiar el contenedor antes de agregar nuevos productos

    products.payload.forEach(product => {
      const productCard = document.createElement('div');
      productCard.className = 'card shadow-sm bg-body-tertiary';
      productCard.style.width = '200px';
      productCard.innerHTML = `
          <div class="card-header m-0 p-1 bg-white" style="height: 200px;">
              <img
                src="${product.thumbnails[0]}"
                alt="${product.title}"
                class="img-fluid"
                style="height: 100%; object-fit: cover;"
              />
            </div>
            <div class="card-body bg-body-tertiary m-2 p-2 mb-0">
              <h2 class="fs-5">${product.title}</h2>
              <p class="fw-lighter mb-1" style="font-size: 0.8em;">${product.description}</p>
              <p class="fw-bolder mb-0" style="font-size: 0.9em;">$${product.price}</p>
            </div>
            <div class="card-footer text-center">
              <div class="btn-group">
                <button class="btn btn-outline-dark btn-sm" onclick="viewProduct('${product._id}')">Ver detalle</button>
                <button class="btn btn-outline-primary btn-sm" onclick="addToCart('${product._id}')" aria-label="Agregar al carrito">
                  <i class="bi bi-cart-plus"></i>
                </button>
              </div>
            </div>
          </div>
      `;

      productsContainer.appendChild(productCard);
    });
  }

  function viewProduct(id) {
    window.location.href = `/products/${id}`;
  }

  

</script>
